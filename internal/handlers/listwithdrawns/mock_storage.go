// Code generated by MockGen. DO NOT EDIT.
// Source: mishin-gophermat/internal/handlers/listwithdrawns (interfaces: AbstrStorage)

// Package listwithdrawns is a generated GoMock package.
package listwithdrawns

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAbstrStorage is a mock of AbstrStorage interface.
type MockAbstrStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAbstrStorageMockRecorder
}

// MockAbstrStorageMockRecorder is the mock recorder for MockAbstrStorage.
type MockAbstrStorageMockRecorder struct {
	mock *MockAbstrStorage
}

// NewMockAbstrStorage creates a new mock instance.
func NewMockAbstrStorage(ctrl *gomock.Controller) *MockAbstrStorage {
	mock := &MockAbstrStorage{ctrl: ctrl}
	mock.recorder = &MockAbstrStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstrStorage) EXPECT() *MockAbstrStorageMockRecorder {
	return m.recorder
}

// SelectWithdrawnsByLogin mocks base method.
func (m *MockAbstrStorage) SelectWithdrawnsByLogin(arg0 context.Context, arg1 string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWithdrawnsByLogin", arg0, arg1)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithdrawnsByLogin indicates an expected call of SelectWithdrawnsByLogin.
func (mr *MockAbstrStorageMockRecorder) SelectWithdrawnsByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithdrawnsByLogin", reflect.TypeOf((*MockAbstrStorage)(nil).SelectWithdrawnsByLogin), arg0, arg1)
}
