// Code generated by MockGen. DO NOT EDIT.
// Source: mishin-gophermat/internal/handlers/listorders (interfaces: OrdersGetter)

// Package listorders is a generated GoMock package.
package listorders

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrdersGetter is a mock of OrdersGetter interface.
type MockOrdersGetter struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersGetterMockRecorder
}

// MockOrdersGetterMockRecorder is the mock recorder for MockOrdersGetter.
type MockOrdersGetterMockRecorder struct {
	mock *MockOrdersGetter
}

// NewMockOrdersGetter creates a new mock instance.
func NewMockOrdersGetter(ctrl *gomock.Controller) *MockOrdersGetter {
	mock := &MockOrdersGetter{ctrl: ctrl}
	mock.recorder = &MockOrdersGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersGetter) EXPECT() *MockOrdersGetterMockRecorder {
	return m.recorder
}

// OrdersGet mocks base method.
func (m *MockOrdersGetter) OrdersGet(arg0 context.Context, arg1 string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersGet", arg0, arg1)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersGet indicates an expected call of OrdersGet.
func (mr *MockOrdersGetterMockRecorder) OrdersGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersGet", reflect.TypeOf((*MockOrdersGetter)(nil).OrdersGet), arg0, arg1)
}
